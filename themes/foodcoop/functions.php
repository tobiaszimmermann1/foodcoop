<?php/** * foodcoop functions and definitions * * @link https://developer.wordpress.org/themes/basics/theme-functions/ * * @package Foodcoop*/if ( ! defined( '_S_VERSION' ) ) {	// Replace the version number of the theme on each release.	define( '_S_VERSION', '1.0.0' );}if ( ! function_exists( 'foodcoop_setup' ) ) :	/**	 * Sets up theme defaults and registers support for various WordPress features.	 *	 * Note that this function is hooked into the after_setup_theme hook, which	 * runs before the init hook. The init hook is too late for some features, such	 * as indicating support for post thumbnails.	 */	function foodcoop_setup() {		/*		 * Make theme available for translation.		 * Translations can be filed in the /languages/ directory.		 * If you're building a theme based on foodcoop, use a find and replace		 * to change 'foodcoop' to the name of your theme in all the template files.		 */		load_theme_textdomain( 'foodcoop', get_template_directory() . '/languages' );		// Add default posts and comments RSS feed links to head.		add_theme_support( 'automatic-feed-links' );		/*		 * Let WordPress manage the document title.		 * By adding theme support, we declare that this theme does not use a		 * hard-coded <title> tag in the document head, and expect WordPress to		 * provide it for us.		 */		add_theme_support( 'title-tag' );		/*		 * Enable support for Post Thumbnails on posts and pages.		 *		 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/		 */		add_theme_support( 'post-thumbnails' );		// This theme uses wp_nav_menu() in one location.		register_nav_menus(			array(				'menu-1' => esc_html__( 'Primary', 'foodcoop' ),			)		);		/*		 * Switch default core markup for search form, comment form, and comments		 * to output valid HTML5.		 */		add_theme_support(			'html5',			array(				'search-form',				'comment-form',				'comment-list',				'gallery',				'caption',				'style',				'script',			)		);		// Set up the WordPress core custom background feature.		add_theme_support(			'custom-background',			apply_filters(				'foodcoop_custom_background_args',				array(					'default-color' => 'ffffff',					'default-image' => '',				)			)		);		// Add theme support for selective refresh for widgets.		add_theme_support( 'customize-selective-refresh-widgets' );		/**		 * Add support for core custom logo.		 *		 * @link https://codex.wordpress.org/Theme_Logo		 */		add_theme_support(			'custom-logo',			array(				'height'      => 250,				'width'       => 250,				'flex-width'  => true,				'flex-height' => true,			)		);	}endif;add_action( 'after_setup_theme', 'foodcoop_setup' );/** * Set the content width in pixels, based on the theme's design and stylesheet. * * Priority 0 to make it available to lower priority callbacks. * * @global int $content_width */function foodcoop_content_width() {	$GLOBALS['content_width'] = apply_filters( 'foodcoop_content_width', 640 );}add_action( 'after_setup_theme', 'foodcoop_content_width', 0 );/** * Register widget area. * * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar */function foodcoop_widgets_init() {	register_sidebar(		array(			'name'          => esc_html__( 'Sidebar', 'foodcoop' ),			'id'            => 'sidebar-1',			'description'   => esc_html__( 'Add widgets here.', 'foodcoop' ),			'before_widget' => '<section id="%1$s" class="widget %2$s">',			'after_widget'  => '</section>',			'before_title'  => '<h2 class="widget-title">',			'after_title'   => '</h2>',		)	);}add_action( 'widgets_init', 'foodcoop_widgets_init' );/** * Enqueue scripts and styles. */function foodcoop_scripts() {	wp_enqueue_style( 'foodcoop-style', get_stylesheet_uri(), array(), _S_VERSION );    wp_enqueue_style( 'bootstrap', get_template_directory_uri() . '/css/bootstrap.min.css',false,'','all');    wp_enqueue_style( 'animate', get_template_directory_uri() . '/css/animate.min.css',false,'','all');    wp_enqueue_style( 'style-g', get_template_directory_uri() . '/css/style-g.css',false,'','all');    wp_enqueue_style( 'fontawesome', get_template_directory_uri() . '/inc/font-awesome/css/font-awesome.min.css',false,'','all');	wp_style_add_data( 'foodcoop-style', 'rtl', 'replace' );	wp_enqueue_script( 'bootstrap', get_template_directory_uri() . '/js/bootstrap.js', array( 'jquery' ), '', true );	wp_enqueue_script( 'foodcoop-navigation', get_template_directory_uri() . '/js/navigation.js', array(), _S_VERSION, true );	wp_enqueue_script( 'jquery-easing', get_template_directory_uri() . '/js/jquery.easing.min.js', array( 'jquery' ), '', true );	wp_enqueue_script( 'jquery-fittext', get_template_directory_uri() . '/js/jquery.fittext.js', array( 'jquery' ), '', true );	wp_enqueue_script( 'wow', get_template_directory_uri() . '/js/wow.min.js', array( 'jquery' ), '', true );    wp_enqueue_script( 'creative', get_template_directory_uri() . '/js/creative.js', array( 'jquery' ), '', true );	wp_enqueue_script( 'counter', get_template_directory_uri() . '/js/counter.js', array( 'jquery' ), '', true );	wp_enqueue_script( 'modal', get_template_directory_uri() . '/js/modal.js', array( 'jquery' ), '', true );    wp_enqueue_script('jquery-ui-datepicker');    wp_register_style('jquery-ui', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css');    wp_enqueue_style('jquery-ui');	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {		wp_enqueue_script( 'comment-reply' );	}}add_action( 'wp_enqueue_scripts', 'foodcoop_scripts' );/** * Implement the Custom Header feature. */require get_template_directory() . '/inc/custom-header.php';/** * Custom template tags for this theme. */require get_template_directory() . '/inc/template-tags.php';/** * Functions which enhance the theme by hooking into WordPress. */require get_template_directory() . '/inc/template-functions.php';/** * Customizer additions. */require get_template_directory() . '/inc/customizer.php';/** * Load Jetpack compatibility file. */if ( defined( 'JETPACK__VERSION' ) ) {	require get_template_directory() . '/inc/jetpack.php';}require_once get_template_directory() . '/inc/class-tgm-plugin-activation.php';add_action( 'tgmpa_register', 'foodcoop_register_required_plugins' );/** * Register the required plugins for this theme. * * In this example, we register five plugins: * - one included with the TGMPA library * - two from an external source, one from an arbitrary source, one from a GitHub repository * - two from the .org repo, where one demonstrates the use of the `is_callable` argument * * The variables passed to the `tgmpa()` function should be: * - an array of plugin arrays; * - optionally a configuration array. * If you are not changing anything in the configuration array, you can remove the array and remove the * variable from the function call: `tgmpa( $plugins );`. * In that case, the TGMPA default settings will be used. * * This function is hooked into `tgmpa_register`, which is fired on the WP `init` action on priority 10. */function foodcoop_register_required_plugins() {	/*	 * Array of plugin arrays. Required keys are name and slug.	 * If the source is NOT from the .org repo, then source is also required.	 */	$plugins = array(/*		array(			'name'               => 'wpForo Forum', // The plugin name.			'slug'               => 'wpforo', // The plugin slug (typically the folder name).			'required'           => true, // If false, the plugin is only 'recommended' instead of required.			'version'            => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher. If the plugin version is higher than the plugin version installed, the user will be notified to update the plugin.			'force_activation'   => true, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.			'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.			'external_url'       => '', // If set, overrides default API URL and points to an external URL.			'is_callable'        => '', // If set, this callable will be be checked for availability to determine if a plugin is active.		),*/		array(			'name'               => 'WooCommerce', // The plugin name.			'slug'               => 'woocommerce', // The plugin slug (typically the folder name).			'required'           => true, // If false, the plugin is only 'recommended' instead of required.			'version'            => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher. If the plugin version is higher than the plugin version installed, the user will be notified to update the plugin.			'force_activation'   => true, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.			'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.			'external_url'       => '', // If set, overrides default API URL and points to an external URL.			'is_callable'        => '', // If set, this callable will be be checked for availability to determine if a plugin is active.		),/*		array(			'name'               => 'Simple File List', // The plugin name.			'slug'               => 'simple-file-list', // The plugin slug (typically the folder name).			'required'           => true, // If false, the plugin is only 'recommended' instead of required.			'version'            => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher. If the plugin version is higher than the plugin version installed, the user will be notified to update the plugin.			'force_activation'   => true, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.			'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.			'external_url'       => '', // If set, overrides default API URL and points to an external URL.			'is_callable'        => '', // If set, this callable will be be checked for availability to determine if a plugin is active.		),*/		array(			'name'               => 'TeraWallet – For WooCommerce', // The plugin name.			'slug'               => 'woo-wallet', // The plugin slug (typically the folder name).			'required'           => true, // If false, the plugin is only 'recommended' instead of required.			'version'            => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher. If the plugin version is higher than the plugin version installed, the user will be notified to update the plugin.			'force_activation'   => true, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.			'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.			'external_url'       => '', // If set, overrides default API URL and points to an external URL.			'is_callable'        => '', // If set, this callable will be be checked for availability to determine if a plugin is active.		),	);	/*	 * Array of configuration settings. Amend each line as needed.	 *	 * TGMPA will start providing localized text strings soon. If you already have translations of our standard	 * strings available, please help us make TGMPA even better by giving us access to these translations or by	 * sending in a pull-request with .po file(s) with the translations.	 *	 * Only uncomment the strings in the config array if you want to customize the strings.	 */	$config = array(		'id'           => 'foodcoop',              // Unique ID for hashing notices for multiple instances of TGMPA.		'default_path' => '',                      // Default absolute path to bundled plugins.		'menu'         => 'tgmpa-install-plugins', // Menu slug.		'parent_slug'  => 'themes.php',            // Parent menu slug.		'capability'   => 'edit_theme_options',    // Capability needed to view plugin install page, should be a capability associated with the parent menu used.		'has_notices'  => true,                    // Show admin notices or not.		'dismissable'  => true,                    // If false, a user cannot dismiss the nag message.		'dismiss_msg'  => '',                      // If 'dismissable' is false, this message will be output at top of nag.		'is_automatic' => false,                   // Automatically activate plugins after installation or not.		'message'      => '',                      // Message to output right before the plugins table.		/*		'strings'      => array(			'page_title'                      => __( 'Install Required Plugins', 'foodcoop' ),			'menu_title'                      => __( 'Install Plugins', 'foodcoop' ),			/* translators: %s: plugin name. * /			'installing'                      => __( 'Installing Plugin: %s', 'foodcoop' ),			/* translators: %s: plugin name. * /			'updating'                        => __( 'Updating Plugin: %s', 'foodcoop' ),			'oops'                            => __( 'Something went wrong with the plugin API.', 'foodcoop' ),			'notice_can_install_required'     => _n_noop(				/* translators: 1: plugin name(s). * /				'This theme requires the following plugin: %1$s.',				'This theme requires the following plugins: %1$s.',				'foodcoop'			),			'notice_can_install_recommended'  => _n_noop(				/* translators: 1: plugin name(s). * /				'This theme recommends the following plugin: %1$s.',				'This theme recommends the following plugins: %1$s.',				'foodcoop'			),			'notice_ask_to_update'            => _n_noop(				/* translators: 1: plugin name(s). * /				'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.',				'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.',				'foodcoop'			),			'notice_ask_to_update_maybe'      => _n_noop(				/* translators: 1: plugin name(s). * /				'There is an update available for: %1$s.',				'There are updates available for the following plugins: %1$s.',				'foodcoop'			),			'notice_can_activate_required'    => _n_noop(				/* translators: 1: plugin name(s). * /				'The following required plugin is currently inactive: %1$s.',				'The following required plugins are currently inactive: %1$s.',				'foodcoop'			),			'notice_can_activate_recommended' => _n_noop(				/* translators: 1: plugin name(s). * /				'The following recommended plugin is currently inactive: %1$s.',				'The following recommended plugins are currently inactive: %1$s.',				'foodcoop'			),			'install_link'                    => _n_noop(				'Begin installing plugin',				'Begin installing plugins',				'foodcoop'			),			'update_link' 					  => _n_noop(				'Begin updating plugin',				'Begin updating plugins',				'foodcoop'			),			'activate_link'                   => _n_noop(				'Begin activating plugin',				'Begin activating plugins',				'foodcoop'			),			'return'                          => __( 'Return to Required Plugins Installer', 'foodcoop' ),			'plugin_activated'                => __( 'Plugin activated successfully.', 'foodcoop' ),			'activated_successfully'          => __( 'The following plugin was activated successfully:', 'foodcoop' ),			/* translators: 1: plugin name. * /			'plugin_already_active'           => __( 'No action taken. Plugin %1$s was already active.', 'foodcoop' ),			/* translators: 1: plugin name. * /			'plugin_needs_higher_version'     => __( 'Plugin not activated. A higher version of %s is needed for this theme. Please update the plugin.', 'foodcoop' ),			/* translators: 1: dashboard link. * /			'complete'                        => __( 'All plugins installed and activated successfully. %1$s', 'foodcoop' ),			'dismiss'                         => __( 'Dismiss this notice', 'foodcoop' ),			'notice_cannot_install_activate'  => __( 'There are one or more required or recommended plugins to install, update or activate.', 'foodcoop' ),			'contact_admin'                   => __( 'Please contact the administrator of this site for help.', 'foodcoop' ),			'nag_type'                        => '', // Determines admin notice type - can only be one of the typical WP notice classes, such as 'updated', 'update-nag', 'notice-warning', 'notice-info' or 'error'. Some of which may not work as expected in older WP versions.		),		*/	);	tgmpa( $plugins, $config );}// REGISTER CUSTOM POST TYPE FOR FRONT PAGEfunction start_post_type() {	$labels = array(		'name'                  => _x( 'Startseite', 'Post Type General Name', 'foodcoop' ),		'singular_name'         => _x( 'Startseiten Abschnitt', 'Post Type Singular Name', 'foodcoop' ),		'menu_name'             => __( 'Startseite', 'foodcoop' ),		'name_admin_bar'        => __( 'Startseiten Abschnitt', 'foodcoop' ),		'archives'              => __( 'Startseite Archiv', 'foodcoop' ),		'attributes'            => __( 'Startseite Attribute', 'foodcoop' ),		'parent_item_colon'     => __( 'Parent Item:', 'foodcoop' ),		'all_items'             => __( 'Alle Abschnitte', 'foodcoop' ),		'add_new_item'          => __( 'Neuer Startseiten Abschnitt', 'foodcoop' ),		'add_new'               => __( 'Abschnitt hinzufuegen', 'foodcoop' ),		'new_item'              => __( 'Neuer Startseiten Abschnitt', 'foodcoop' ),		'edit_item'             => __( 'Startseiten Abschnitt bearbeiten', 'foodcoop' ),		'update_item'           => __( 'Startseiten Abschnitt speichern', 'foodcoop' ),		'view_item'             => __( 'Startseiten Abschnitt ansehen', 'foodcoop' ),		'view_items'            => __( 'Startseite ansehen', 'foodcoop' ),		'search_items'          => __( 'Startseiten Abschnitt suchen', 'foodcoop' ),		'not_found'             => __( 'Not found', 'foodcoop' ),		'not_found_in_trash'    => __( 'Not found in Trash', 'foodcoop' ),		'featured_image'        => __( 'Featured Image', 'foodcoop' ),		'set_featured_image'    => __( 'Set featured image', 'foodcoop' ),		'remove_featured_image' => __( 'Remove featured image', 'foodcoop' ),		'use_featured_image'    => __( 'Use as featured image', 'foodcoop' ),		'insert_into_item'      => __( 'Insert into item', 'foodcoop' ),		'uploaded_to_this_item' => __( 'Uploaded to this item', 'foodcoop' ),		'items_list'            => __( 'Items list', 'foodcoop' ),		'items_list_navigation' => __( 'Items list navigation', 'foodcoop' ),		'filter_items_list'     => __( 'Filter items list', 'foodcoop' ),	);	$args = array(		'label'                 => __( 'Startseite', 'foodcoop' ),		'description'           => __( '', 'foodcoop' ),		'labels'                => $labels,		'public'                => true,		'show_ui'               => true,		'show_in_menu'          => true,		'menu_position'         => 3,        'menu_icon'             => 'dashicons-format-aside',        'show_in_rest'          => true,        'supports'              => array('editor'),	);	register_post_type( 'startseite', $args );}add_action( 'init', 'start_post_type', 0 );// CREATE FRONT PAGE POSTS AFTER THEME ACTIVATIONadd_action( 'after_switch_theme', 'create_posts_on_theme_activation' );function create_posts_on_theme_activation(){    $start_posts = array(        'slider-text',        'einleitung',        'wer-wir-sind',        'termine',        'sortiment',        'ueber-uns',        'team',        'bestellprozess',        'statuten'    );    $count = count($start_posts);    $count = $count - 1;    $i = 0;    while ($i <= $count) {        // Set the title, template, etc        $new_post_slug     = $start_posts[$i];        $new_post_title     = ucfirst(str_replace('-', ' ', $start_posts[$i]));        $new_post_content   = '';        // Store the above data in an array        $new_page = array(                'post_type'     => 'startseite',                'post_title'    => $new_post_title,                'post_content'  => $new_post_content,                'post_status'   => 'publish',                'post_name'     => $new_post_slug        );        // If the page doesn't already exist, create it        $args = array(          'name'        => $new_post_slug,          'post_type'   => 'startseite',          'post_status' => 'publish'        );        $check = get_posts($args);        if($check == false){            wp_insert_post($new_page);        }        $i++;    }}// ADD BESTELLRUNDEN POST TYPEfunction bestellrunden_post_type() {	$labels = array(		'name'                  => _x( 'Bestellrunden', 'Post Type General Name', 'foodcoop' ),		'singular_name'         => _x( 'Bestellrunde', 'Post Type Singular Name', 'foodcoop' ),		'menu_name'             => __( 'Bestellrunden', 'foodcoop' ),		'name_admin_bar'        => __( 'Bestellrunde', 'foodcoop' ),		'archives'              => __( 'Bestellrunden Archiv', 'foodcoop' ),		'attributes'            => __( 'Bestellrunden Attribute', 'foodcoop' ),		'parent_item_colon'     => __( 'Parent Item:', 'foodcoop' ),		'all_items'             => __( 'Alle Bestellrunden', 'foodcoop' ),		'add_new_item'          => __( 'Neuer Bestellrunde', 'foodcoop' ),		'add_new'               => __( 'Bestellrunde hinzufuegen', 'foodcoop' ),		'new_item'              => __( 'Neue Bestellrunde', 'foodcoop' ),		'edit_item'             => __( 'Bestellrunde bearbeiten', 'foodcoop' ),		'update_item'           => __( 'Bestellrunde speichern', 'foodcoop' ),		'view_item'             => __( 'Bestellrunde ansehen', 'foodcoop' ),		'view_items'            => __( 'Bestellrunden ansehen', 'foodcoop' ),		'search_items'          => __( 'Bestellrunde suchen', 'foodcoop' ),		'not_found'             => __( 'Not found', 'foodcoop' ),		'not_found_in_trash'    => __( 'Not found in Trash', 'foodcoop' ),		'featured_image'        => __( 'Featured Image', 'foodcoop' ),		'set_featured_image'    => __( 'Set featured image', 'foodcoop' ),		'remove_featured_image' => __( 'Remove featured image', 'foodcoop' ),		'use_featured_image'    => __( 'Use as featured image', 'foodcoop' ),		'insert_into_item'      => __( 'Insert into item', 'foodcoop' ),		'uploaded_to_this_item' => __( 'Uploaded to this item', 'foodcoop' ),		'items_list'            => __( 'Items list', 'foodcoop' ),		'items_list_navigation' => __( 'Items list navigation', 'foodcoop' ),		'filter_items_list'     => __( 'Filter items list', 'foodcoop' ),	);	$args = array(		'label'                 => __( 'Bestellrunden', 'foodcoop' ),		'description'           => __( '', 'foodcoop' ),		'labels'                => $labels,		'public'                => true,		'show_ui'               => true,		'show_in_menu'          => true,		'menu_position'         => 40,        'menu_icon'             => 'dashicons-calendar-alt',        'supports'              => array(''),	);	register_post_type( 'bestellrunden', $args );}add_action( 'init', 'bestellrunden_post_type', 0 );// ADD META BOXES FOR BESTELLRUNDENadd_action( 'admin_menu', 'bestellrunden_add_metabox' );function bestellrunden_add_metabox() {	add_meta_box(		'bestellrunde', // metabox ID		'Bestellrunde Daten', // title		'bestellrunden_metabox_callback', // callback function		'bestellrunden', // post type or post types in array		'normal', // position (normal, side, advanced)		'default' // priority (default, low, high, core)	);}function bestellrunden_metabox_callback( $post ) {    $start = get_post_meta( $post->ID, 'bestellrunde_start', true );	$ende = get_post_meta( $post->ID, 'bestellrunde_ende', true );	$verteiltag = get_post_meta( $post->ID, 'bestellrunde_verteiltag', true );	// nonce, actually I think it is not necessary here	wp_nonce_field( 'somerandomstr', '_bestellrundennonce' );	echo '    <table class="form-table">		<tbody>			<tr>				<th><label for="bestellrunde_start" name="bestellrunde_start">Start der Betellrunde</label></th>                <td><input type="date" id="bestellrunde_start" name="bestellrunde_start" value="' . esc_attr( $start ) . '"></td>			</tr>			<tr>				<th><label for="bestellrunde_ende" name="bestellrunde_ende">Ende der Betellrunde</label></th>                <td><input type="date" id="bestellrunde_ende" name="bestellrunde_ende" value="' . esc_attr( $ende ) . '"></td>			</tr>			<tr>				<th><label for="bestellrunde_verteiltag" name="bestellrunde_verteiltag">Verteiltag</label></th>                <td><input type="date" id="bestellrunde_verteiltag" name="bestellrunde_verteiltag" value="' . esc_attr( $verteiltag ) . '"></td>			</tr>		</tbody>	</table>    ';}add_action( 'save_post', 'bestellrunden_save_meta', 10, 2 );function bestellrunden_save_meta( $post_id, $post ) {	// nonce check	if ( ! isset( $_POST[ '_bestellrundennonce' ] ) || ! wp_verify_nonce( $_POST[ '_bestellrundennonce' ], 'somerandomstr' ) ) {		return $post_id;	}	// check current use permissions	$post_type = get_post_type_object( $post->post_type );	if ( ! current_user_can( $post_type->cap->edit_post, $post_id ) ) {		return $post_id;	}	// Do not save the data if autosave	if ( defined('DOING_AUTOSAVE') && DOING_AUTOSAVE ) {		return $post_id;	}	// define your own post type here	if( $post->post_type != 'bestellrunden' ) {		return $post_id;	}	if( isset( $_POST[ 'bestellrunde_start' ] ) ) {		update_post_meta( $post_id, 'bestellrunde_start', sanitize_text_field( $_POST[ 'bestellrunde_start' ] ) );	} else {		delete_post_meta( $post_id, 'bestellrunde_start' );	}	if( isset( $_POST[ 'bestellrunde_ende' ] ) ) {		update_post_meta( $post_id, 'bestellrunde_ende', sanitize_text_field( $_POST[ 'bestellrunde_ende' ] ) );	} else {		delete_post_meta( $post_id, 'bestellrunde_ende' );	}	if( isset( $_POST[ 'bestellrunde_verteiltag' ] ) ) {		update_post_meta( $post_id, 'bestellrunde_verteiltag', sanitize_text_field( $_POST[ 'bestellrunde_verteiltag' ] ) );	} else {		delete_post_meta( $post_id, 'bestellrunde_verteiltag' );	}	return $post_id;}add_filter( 'wp_insert_post_data' , 'modify_post_title' , '99', 1 ); // Grabs the inserted post data so you can modify it.function modify_post_title( $data ){  if($data['post_type'] == 'bestellrunden' && isset($_POST['bestellrunde_verteiltag'])) { // If the actual field name of the rating date is different, you'll have to update this.    $title = $_POST['bestellrunde_verteiltag'];    $data['post_title'] =  $title ; //Updates the post title to your new title.  }  return $data; // Returns the modified data.}// RESTRUCTURE ADMIN MENUadd_action( 'admin_init', 'my_remove_menu_pages' );function my_remove_menu_pages() {   remove_menu_page('edit.php'); // Posts   remove_menu_page('link-manager.php'); // Links   remove_menu_page('edit-comments.php'); // Comments   remove_menu_page('edit.php'); // Posts}// LIST CATEGORIES FUNCTION// PRODUCT LIST BY CATEGORY FUNCTIONfunction foodcoop_categories_list_function() {    $getoptions = get_option('foodcoop_plugin_options');    $colorbg1 = esc_attr($getoptions['colorbg1']);    $colortext1 = esc_attr($getoptions['colortext1']);    $colorbg2 = esc_attr($getoptions['colorbg2']);    $colortext2 = esc_attr($getoptions['colortext2']);    $colorlink = esc_attr($getoptions['colorlink']);  $args = array(   'taxonomy'   => "product_cat",   'orderby'    => 'title',   'order'      => 'DESC',   'hide_empty' => true,   'exclude'    => 15  );  $product_categories = get_terms($args);  foreach( $product_categories as $cat ) { ?>    <div class="col-sm-3 category">        <div class="portfolio-box" style="background-color:<?php echo $colorbg2; ?>;color:<?php echo $colortext2; ?>" onMouseOver="this.style.backgroundColor='<?php echo $colorlink; ?>'" onMouseOut="this.style.backgroundColor='<?php echo $colorbg2; ?>'" >            <span><?php echo $cat->name; ?></span>        </div>    </div>  <?php  }}// IMAGE SELECTION IN ADMIN AREA USE MEDIA LIBRARYadd_action( 'admin_enqueue_scripts', 'misha_include_js' );function misha_include_js() {	// I recommend to add additional conditions just to not to load the scipts on each page	if ( ! did_action( 'wp_enqueue_media' ) ) {		wp_enqueue_media();	} 	wp_enqueue_script( 'myuploadscript', get_stylesheet_directory_uri() . '/js/admin-settings.js', array( 'jquery' ) );	wp_enqueue_script( 'farbtastic', get_template_directory_uri() . '/js/farbtastic.js', array( 'jquery' ), '', true );    wp_enqueue_style( 'farbtastic', get_template_directory_uri() . '/css/farbtastic.css',false,'','all');}// OPTIONS MENUfunction foodcoop_add_settings_page() {    add_options_page( 'Foodcoop Einstellungen', 'Foodcoop', 'manage_options', 'foodcoop-einstellungen', 'foodcoop_render_plugin_settings_page' );}add_action( 'admin_menu', 'foodcoop_add_settings_page' );function foodcoop_render_plugin_settings_page() {    ?>    <h2>Foodcoop Einstellungen</h2>    <form action="options.php" method="post">        <?php        settings_fields( 'foodcoop_plugin_options' );        do_settings_sections( 'foodcoop-einstellungen' ); ?>        <input name="submit" class="button button-primary" type="submit" value="<?php esc_attr_e( 'Save' ); ?>" />    </form>    <?php}function foodcoop_register_settings() {    register_setting( 'foodcoop_plugin_options', 'foodcoop_plugin_options', 'foodcoop_plugin_options_validate' );    add_settings_section( 'foodcoop_settings_section', '', 'foodcoop_plugin_section_text', 'foodcoop-einstellungen' );    add_settings_field( 'foodcoop_settings_header', 'Header Bild', 'foodcoop_settings_header', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_colorbg1', 'Hintergrundfarbe 1', 'foodcoop_settings_colorbg1', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_colortext1', 'Text Farbe 1', 'foodcoop_settings_colortext1', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_colorbg2', 'Hintergrundfarbe 2', 'foodcoop_settings_colorbg2', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_colortext2', 'Text Farbe 2', 'foodcoop_settings_colortext2', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_colorlink', 'Link Farbe', 'foodcoop_settings_colorlink', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_foodsoft', 'Foodsoft URL', 'foodcoop_settings_foodsoft', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_adresse', 'Plan zum Verteillokal', 'foodcoop_settings_adresse', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_email', 'Email Adresse', 'foodcoop_settings_email', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_jahresbeitrag', 'Jahresbeitrag', 'foodcoop_settings_jahresbeitrag', 'foodcoop-einstellungen', 'foodcoop_settings_section' );    add_settings_field( 'foodcoop_settings_anzahlb', 'Anzahl Bestellrunden pro Jahr', 'foodcoop_settings_anzahlb', 'foodcoop-einstellungen', 'foodcoop_settings_section' );}add_action( 'admin_init', 'foodcoop_register_settings' );function foodcoop_plugin_options_validate( $input ) {    $newinput['header'] = trim( $input['header'] );    $newinput['colorbg1'] = trim( $input['colorbg1'] );    $newinput['colorbg2'] = trim( $input['colorbg2'] );    $newinput['colortext1'] = trim( $input['colortext1'] );    $newinput['colortext2'] = trim( $input['colortext2'] );    $newinput['colorlink'] = trim( $input['colorlink'] );    $newinput['foodsoft'] = trim( $input['foodsoft'] );    $newinput['adresse'] = trim( $input['adresse'] );    $newinput['email'] = trim( $input['email'] );    $newinput['jahresbeitrag'] = trim( $input['jahresbeitrag'] );    $newinput['anzahlb'] = trim( $input['anzahlb'] );    return $newinput;}function foodcoop_plugin_section_text() {    $url = get_home_url();    echo "        <p>Hier kannst du alle Einstellungen deiner Foodcoop definieren.</p>        <hr>        <p style='font-weight: bold;'>Den Namen deiner Foodcoop kannst du unter <a href='".$url."/wp-admin/options-general.php'>Einstellungen/Allgemein</a> festlegen.</p>        <hr>    ";}function foodcoop_settings_header() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['header'])) {        $options = esc_attr($options['header']);        	echo '                <p style="font-size: 16px;margin-bottom:20px;">Suche ein Bild aus, das auf der Startseite oben im ersten Abschnitt angezeigt wird.</p>                <img id="foodcoop_settings_header_img" src="'.$options.'" alt="Header Bild" width="200px"/><br /> <br />                <a href="#" class="misha-upl">Bild hochladen</a>  |                <a href="#" class="misha-rmv">Bild entfernen</a>        	    <input type="hidden" id="foodcoop_settings_header" name="foodcoop_plugin_options[header]" type="text" value="'.$options.'" /><hr>';    }    else {        $options = '';        	echo '                <p style="font-size: 16px;margin-bottom:20px;">Suche ein Bild aus, das auf der Startseite oben im ersten Abschnitt angezeigt wird.</p>                <img id="foodcoop_settings_header_img" src="'.$options.'" alt="Header Bild" width="200px"/><br />                <a href="#" class="misha-upl">Bild hochladen</a>  |                <a href="#" class="misha-rmv">Bild entfernen</a>        	    <input type="hidden" id="foodcoop_settings_header" name="foodcoop_plugin_options[header]" type="text" value="'.$options.'" /><hr>';    }}function foodcoop_settings_colorbg1() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['colorbg1'])) {        $options = esc_attr($options['colorbg1']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Suche eine helle Hintergrundfarbe aus.</p>            <div style='display:flex;flex-flow:row;width:100%;align-items:center;justify-content:flex-start;'>            <div style='margin-right:50px;' id='colorpicker-colorbg1'></div>            <input id='foodcoop_settings_colorbg1' name='foodcoop_plugin_options[colorbg1]' type='text' value='".$options."' />            </div><hr>";}function foodcoop_settings_colortext1() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['colortext1'])) {        $options = esc_attr($options['colortext1']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Suche eine dunkle Textfarbe aus, die auf Hintergrundfarbe 1 passt.</p>            <div style='display:flex;flex-flow:row;width:100%;align-items:center;justify-content:flex-start;'>            <div style='margin-right:50px;' id='colorpicker-colortext1'></div>            <input id='foodcoop_settings_colortext1' name='foodcoop_plugin_options[colortext1]' type='text' value='".$options."' />            </div><hr>";}function foodcoop_settings_colorbg2() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['colorbg2'])) {        $options = esc_attr($options['colorbg2']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Suche eine dunkle Hintergrundfarbe aus.</p>            <div style='display:flex;flex-flow:row;width:100%;align-items:center;justify-content:flex-start;'>            <div style='margin-right:50px;' id='colorpicker-colorbg2'></div>            <input id='foodcoop_settings_colorbg2' name='foodcoop_plugin_options[colorbg2]' type='text' value='".$options."' />            </div><hr>";}function foodcoop_settings_colortext2() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['colortext2'])) {        $options = esc_attr($options['colortext2']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Suche eine helle Textfarbe aus, die auf Hintergrundfarbe 1 passt.</p>            <div style='display:flex;flex-flow:row;width:100%;align-items:center;justify-content:flex-start;'>            <div style='margin-right:50px;' id='colorpicker-colortext2'></div>            <input id='foodcoop_settings_colortext2' name='foodcoop_plugin_options[colortext2]' type='text' value='".$options."' />            </div><hr>";}function foodcoop_settings_colorlink() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['colorlink'])) {        $options = esc_attr($options['colorlink']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Die Link Farbe muss auf beide Hintergrundfarben passen.</p>            <div style='display:flex;flex-flow:row;width:100%;align-items:center;justify-content:flex-start;'>            <div style='margin-right:50px;' id='colorpicker-colorlink'></div>            <input id='foodcoop_settings_colorlink' name='foodcoop_plugin_options[colorlink]' type='text' value='".$options."' />            </div><hr>";}function foodcoop_settings_foodsoft() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['foodsoft'])) {        $options = esc_attr($options['foodsoft']);    }    else {        $options = '';    }    echo "<input id='foodcoop_settings_foodsoft' name='foodcoop_plugin_options[foodsoft]' type='text' value='".$options."' /><hr>";}function foodcoop_settings_adresse() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['adresse'])) {        $options = esc_attr($options['adresse']);        	echo '                <p style="font-size: 16px;margin-bottom:20px;">Laden einen Plan hoch, der die Adresse des Verteillokals zeigt.</p>                <img id="foodcoop_settings_adresse_img" src="'.$options.'" alt="Adresse Bild" width="200px"/><br /> <br />                <a href="#" class="adresse-upl">Bild hochladen</a>  |                <a href="#" class="adresse-rmv">Bild entfernen</a>        	    <input type="hidden" id="foodcoop_settings_adresse" name="foodcoop_plugin_options[adresse]" type="text" value="'.$options.'" /><hr>';    }    else {        $options = '';        	echo '                <p style="font-size: 16px;margin-bottom:20px;">Laden einen Plan hoch, der die Adresse des Verteillokals zeigt.</p>                <img id="foodcoop_settings_adresse_img" src="'.$options.'" alt="Adresse Bild" width="200px"/><br />                <a href="#" class="adresse-upl">Bild hochladen</a>  |                <a href="#" class="adresse-rmv">Bild entfernen</a>        	    <input type="hidden" id="foodcoop_settings_adresse" name="foodcoop_plugin_options[adresse]" type="text" value="'.$options.'" /><hr>';    }}function foodcoop_settings_email() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['email'])) {        $options = esc_attr($options['email']);    }    else {        $options = '';    }    echo "<input id='foodcoop_settings_email' name='foodcoop_plugin_options[email]' type='text' value='".$options."' /><hr>";}function foodcoop_settings_jahresbeitrag() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['jahresbeitrag'])) {        $options = esc_attr($options['jahresbeitrag']);    }    else {        $options = '';    }    echo "  <p style='font-size: 16px;margin-bottom:20px;'>Mitgliederbeitrag pro Jahr in CHF.</p>            <input id='foodcoop_settings_jahresbeitrag' name='foodcoop_plugin_options[jahresbeitrag]' type='text' value='".$options."' /><hr>";}function foodcoop_settings_anzahlb() {    $options = get_option( 'foodcoop_plugin_options' );    if (isset($options['anzahlb'])) {        $options = esc_attr($options['anzahlb']);    }    else {        $options = '';    }    echo "  <input id='foodcoop_settings_anzahlb' name='foodcoop_plugin_options[anzahlb]' type='text' value='".$options."' /><hr>";}